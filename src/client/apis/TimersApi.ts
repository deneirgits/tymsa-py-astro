/* tslint:disable */
/* eslint-disable */
/**
 * Tymr API
 * API for Tymr time-tracking
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedTimer,
  Timer,
  TimerStop,
} from '../models/index';
import {
    PatchedTimerFromJSON,
    PatchedTimerToJSON,
    TimerFromJSON,
    TimerToJSON,
    TimerStopFromJSON,
    TimerStopToJSON,
} from '../models/index';

export interface TimersCreateRequest {
    timer: Timer;
}

export interface TimersCurrentStopRequest {
    timerStop?: TimerStop;
}

export interface TimersDestroyRequest {
    id: number;
}

export interface TimersPartialUpdateRequest {
    id: number;
    patchedTimer?: PatchedTimer;
}

export interface TimersRetrieveRequest {
    id: number;
}

export interface TimersUpdateRequest {
    id: number;
    timer: Timer;
}

/**
 * 
 */
export class TimersApi extends runtime.BaseAPI {

    /**
     */
    async timersCreateRaw(requestParameters: TimersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Timer>> {
        if (requestParameters.timer === null || requestParameters.timer === undefined) {
            throw new runtime.RequiredError('timer','Required parameter requestParameters.timer was null or undefined when calling timersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/timers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimerToJSON(requestParameters.timer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimerFromJSON(jsonValue));
    }

    /**
     */
    async timersCreate(requestParameters: TimersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Timer> {
        const response = await this.timersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timersCurrentRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Timer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/timers/current/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimerFromJSON(jsonValue));
    }

    /**
     */
    async timersCurrentRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Timer> {
        const response = await this.timersCurrentRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async timersCurrentStopRaw(requestParameters: TimersCurrentStopRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimerStop>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/timers/stop/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimerStopToJSON(requestParameters.timerStop),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimerStopFromJSON(jsonValue));
    }

    /**
     */
    async timersCurrentStop(requestParameters: TimersCurrentStopRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimerStop> {
        const response = await this.timersCurrentStopRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timersDestroyRaw(requestParameters: TimersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timersDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/timers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async timersDestroy(requestParameters: TimersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.timersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async timersListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Timer>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/timers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimerFromJSON));
    }

    /**
     */
    async timersList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Timer>> {
        const response = await this.timersListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async timersPartialUpdateRaw(requestParameters: TimersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Timer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/timers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTimerToJSON(requestParameters.patchedTimer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimerFromJSON(jsonValue));
    }

    /**
     */
    async timersPartialUpdate(requestParameters: TimersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Timer> {
        const response = await this.timersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timersRetrieveRaw(requestParameters: TimersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Timer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timersRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/timers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimerFromJSON(jsonValue));
    }

    /**
     */
    async timersRetrieve(requestParameters: TimersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Timer> {
        const response = await this.timersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async timersUpdateRaw(requestParameters: TimersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Timer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling timersUpdate.');
        }

        if (requestParameters.timer === null || requestParameters.timer === undefined) {
            throw new runtime.RequiredError('timer','Required parameter requestParameters.timer was null or undefined when calling timersUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/timers/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimerToJSON(requestParameters.timer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimerFromJSON(jsonValue));
    }

    /**
     */
    async timersUpdate(requestParameters: TimersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Timer> {
        const response = await this.timersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
